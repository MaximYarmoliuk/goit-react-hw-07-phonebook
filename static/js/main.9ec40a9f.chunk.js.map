{"version":3,"sources":["components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ThemeSelector/ThemeSelector.module.css","components/ContactForm/ContactForm.module.css","contexts/ThemeContext/ThemeContext.js","hoc/withTheme.js","redux/contacts/contactsAction.js","redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/ThemeSelector/ThemeSelector.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","Context","createContext","ThemeContext","toggleTheme","setState","type","state","themeConfig","light","headerBg","fontColor","bodybg","dark","Provider","value","this","props","children","Component","Consumer","withTheme","WrappedComponent","theme","addContactsRequest","createAction","addContactsSuccess","addContactsError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactsRequest","removeContactsSuccess","removeContactsError","changeFilter","axios","defaults","baseURL","headers","post","addContact","name","number","dispatch","contactActions","then","data","catch","err","fetchContacts","get","removeContact","contactId","delete","getContacts","contacts","items","getFilter","filter","getFilteredContacts","createSelector","contact","toLowerCase","includes","getContactById","find","id","ContactForm","handleSubmit","e","preventDefault","checkLength","string","length","checkOnExist","alert","handleChange","target","className","styles","contactForm","onSubmit","contactLabel","contactInput","onChange","contactSubmit","mapDispatchToProps","contactsOperations","connect","contactsSelectors","ownProps","onRemoveContact","item","button","onClick","map","key","onChangeFilter","contactsAction","label","input","center","checkbox","checked","App","onFetchContacts","style","color","background","isLoadingContacts","height","width","contactsOperation","contactsSelector","loading","createReducer","action","payload","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.9ec40a9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__38PTE\",\"button\":\"ContactListItem_button__3a2tP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__39_6l\",\"input\":\"Filter_input__sHR07\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"ThemeSelector_checkbox__yU8Fb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__3sDfq\",\"contactLabel\":\"ContactForm_contactLabel__xofBd\",\"contactInput\":\"ContactForm_contactInput__3gPst\",\"contactSubmit\":\"ContactForm_contactSubmit__XMFZc\"};","import React, { Component, createContext } from \"react\";\r\n\r\nconst Context = createContext();\r\n\r\nexport default class ThemeContext extends Component {\r\n  static Consumer = Context.Consumer;\r\n\r\n  toggleTheme = () => {\r\n    this.setState({\r\n      type: this.state.type === \"dark\" ? \"light\" : \"dark\"\r\n    });\r\n  };\r\n\r\n  state = {\r\n    type: \"light\",\r\n    themeConfig: {\r\n      light: {\r\n        headerBg: \"#F7B30C\",\r\n        fontColor: \"black\",\r\n        bodybg: \"white\"\r\n      },\r\n      dark: {\r\n        headerBg: \"#3c3c3c\",\r\n        fontColor: \"white\",\r\n        bodybg: \"black\"\r\n      }\r\n    },\r\n    toggleTheme: this.toggleTheme\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ThemeContext from \"../contexts/ThemeContext/ThemeContext\";\r\n\r\nconst withTheme = WrappedComponent => {\r\n  return function WithTheme(props) {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {theme => (\r\n          <WrappedComponent\r\n            {...props}\r\n            theme={theme}\r\n          />\r\n        )}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  };\r\n};\r\n\r\nexport default withTheme;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactsRequest = createAction(\"/contacts/addRequest\");\r\nconst addContactsSuccess = createAction(\"/contacts/addSuccess\");\r\nconst addContactsError = createAction(\"/contacts/addError\");\r\n\r\nconst fetchContactsRequest = createAction(\"/contacts/fetchRequest\");\r\nconst fetchContactsSuccess = createAction(\"/contacts/fetchSuccess\");\r\nconst fetchContactsError = createAction(\"/contacts/fetchError\");\r\n\r\nconst removeContactsRequest = createAction(\"/contacts/removeRequest\");\r\nconst removeContactsSuccess = createAction(\"/contacts/removeSuccess\");\r\nconst removeContactsError = createAction(\"/contacts/removeError\");\r\n\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\nexport default {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  removeContactsRequest,\r\n  removeContactsSuccess,\r\n  removeContactsError,\r\n  changeFilter\r\n};\r\n","import contactActions from \"./contactsAction\";\r\nimport axios from \"axios\";\r\n\r\nconst ownerId = \"f9f2a270-49b1-45db-b304-75c015e05a15\";\r\n\r\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com/v1\";\r\naxios.defaults.headers[\"Authorization\"] = ownerId;\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(contactActions.addContactsRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", {\r\n      name,\r\n      number\r\n    })\r\n    .then(({ data }) => dispatch(contactActions.addContactsSuccess(data)))\r\n    .catch(err => dispatch(contactActions.addContactsError(err)));\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactActions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(contactActions.fetchContactsSuccess(data)))\r\n    .catch(err => dispatch(contactActions.fetchContactsError(err)));\r\n};\r\n\r\nconst removeContact = contactId => dispatch => {\r\n  dispatch(contactActions.removeContactsRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(contactActions.removeContactsSuccess(contactId)))\r\n    .catch(err => dispatch(contactActions.removeContactsError(err)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  fetchContacts,\r\n  removeContact\r\n};\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter)\r\n    );\r\n  }\r\n);\r\n\r\nconst getContactById = (state, contactId) => {\r\n  const contacts = getContacts(state);\r\n\r\n  return contacts.find(contact => contact.id === contactId);\r\n};\r\n\r\nexport default {\r\n  getContacts,\r\n  getFilter,\r\n  getFilteredContacts,\r\n  getContactById\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperations from \"../../redux/contacts/contactsOperations\";\r\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\"\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const checkLength = string => string.length < 1;\r\n    const checkOnExist = this.props.contacts.find(\r\n      contact => contact.name === name\r\n    );\r\n\r\n    if (checkLength(`${name}`) || checkLength(`${number}`)) {\r\n      alert(\"Please, fill in all required entry fields\");\r\n      return;\r\n    }\r\n\r\n    if (checkOnExist) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    this.props.addContact({ name, number });\r\n\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Phonebook</h2>\r\n\r\n        <form className={styles.contactForm} onSubmit={this.handleSubmit}>\r\n          <label className={styles.contactLabel}>\r\n            Name\r\n            <input\r\n              className={styles.contactInput}\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n\r\n          <label className={styles.contactLabel}>\r\n            Number\r\n            <input\r\n              className={styles.contactInput}\r\n              type=\"text\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n\r\n          <button className={styles.contactSubmit} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getContacts(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact: contactsOperations.addContact\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperations from \"../../redux/contacts/contactsOperations\";\r\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\r\nimport propTypes from \"prop-types\";\r\nimport styles from \"./ContactListItem.module.css\";\r\n\r\nconst ContactListItem = ({ name, number, onRemoveContact }) => {\r\n  return (\r\n    <li className={styles.item}>\r\n      <p className=\"TaskList-text\">\r\n        {name}: {number}\r\n      </p>\r\n      <button className={styles.button} type=\"button\" onClick={onRemoveContact}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: propTypes.string.isRequired,\r\n  number: propTypes.string.isRequired,\r\n  onRemoveContact: propTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = contactsSelectors.getContactById(state, ownProps.id)\r\n\r\n  return {\r\n    ...contact\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemoveContact: () => dispatch(contactsOperations.removeContact(ownProps.id))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React from \"react\";\r\nimport ContactListItem from \"../ContactListItem/ContactListItem\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <div>\r\n      <h2>Contacts</h2>\r\n      <ul className=\"Contact\">\r\n        {contacts.map(({ id }) => (\r\n          <ContactListItem key={id} id={id} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: propTypes.arrayOf(\r\n    propTypes.exact({\r\n      id: propTypes.string.isRequired,\r\n      name: propTypes.string.isRequired,\r\n      number: propTypes.string.isRequired\r\n    })\r\n  )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getFilteredContacts(state)\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsAction from \"../../redux/contacts/contactsAction\";\r\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\r\nimport styles from \"./Filter.module.css\";\r\n\r\nfunction Filter({ value, onChangeFilter }) {\r\n  return (\r\n    <div>\r\n      <label className={styles.label}>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          className={styles.input}\r\n          value={value}\r\n          onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: propTypes.string.isRequired,\r\n  onChangeFilter: propTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsAction.changeFilter\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport styles from \"./ThemeSelector.module.css\";\r\nimport withTheme from \"../../hoc/withTheme\";\r\n\r\nconst ThemeSelector = ({ theme }) => {\r\n  return (\r\n    <div className={styles.center}>\r\n      <span className=\"label\">{theme.type}</span>\r\n      <input\r\n        type=\"checkbox\"\r\n        className={styles.checkbox}\r\n        checked={theme.type === \"dark\"}\r\n        onChange={() => theme.toggleTheme()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withTheme(ThemeSelector);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport withTheme from \"../hoc/withTheme\";\r\nimport ContactForm from \"./ContactForm/ContactForm\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport Filter from \"./Filter/Filter\";\r\nimport contactsSelector from \"../redux/contacts/contactsSelectors\";\r\nimport ThemeSelector from \"./ThemeSelector/ThemeSelector\";\r\nimport contactsOperation from \"../redux/contacts/contactsOperations\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { themeConfig, type } = this.props.theme;\r\n    return (\r\n      <div\r\n        style={{\r\n          color: themeConfig[type].fontColor,\r\n          background: themeConfig[type].bodybg\r\n        }}\r\n      >\r\n        {this.props.isLoadingContacts && (\r\n          <Loader type=\"Puff\" color=\"#00BFFF\" height={50} width={50} />\r\n        )}\r\n        <ThemeSelector />\r\n\r\n        <ContactForm />\r\n\r\n        {this.props.contacts.length >= 2 && <Filter />}\r\n\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelector.getContacts(state),\r\n  isLoadingContacts: state.contacts.loading\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactsOperation.fetchContacts\r\n};\r\n\r\nexport default withTheme(connect(mapStateToProps, mapDispatchToProps)(App));\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport contactActions from \"./contactsAction\";\r\n\r\nconst onAddAction = (state, action) => {\r\n  return [...state, action.payload];\r\n};\r\n\r\nconst onRemoveAction = (state, { type, payload }) => {\r\n  return state.filter(contact => contact.id !== payload);\r\n};\r\n\r\nconst onChangeFilter = (state, { type, payload }) => {\r\n  return payload;\r\n};\r\n\r\nconst items = createReducer([], {\r\n  [contactActions.fetchContactsSuccess]: (state, action) => action.payload,\r\n  [contactActions.addContactsSuccess]: onAddAction,\r\n  [contactActions.removeContactsSuccess]: onRemoveAction\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [contactActions.changeFilter]: onChangeFilter\r\n});\r\n\r\n//ERROR\r\n\r\nconst loading = createReducer(false, {\r\n  [contactActions.fetchContactsRequest]: () => true,\r\n  [contactActions.fetchContactsSuccess]: () => false,\r\n  [contactActions.fetchContactsError]: () => false,\r\n\r\n  [contactActions.addContactsRequest]: () => true,\r\n  [contactActions.addContactsSuccess]: () => false,\r\n  [contactActions.addContactsError]: () => false,\r\n  \r\n  [contactActions.removeContactsRequest]: () => true,\r\n  [contactActions.removeContactsSuccess]: () => false,\r\n  [contactActions.removeContactsError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./contacts/contactsReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer\r\n  }\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport ThemeContext from \"../src/contexts/ThemeContext/ThemeContext\";\r\nimport App from \"./components/App\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ThemeContext>\r\n      <App />\r\n    </ThemeContext>\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}